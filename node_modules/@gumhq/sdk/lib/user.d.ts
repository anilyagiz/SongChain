/// <reference types="node" />
import { SDK } from ".";
import * as anchor from "@project-serum/anchor";
export interface GumDecodedUser {
    authority: string;
    cl_pubkey: string;
    randomhash: number[];
}
export declare class User {
    private readonly sdk;
    constructor(sdk: SDK);
    userPDA(randomHash: Buffer): Promise<anchor.web3.PublicKey>;
    get(userAccount: anchor.web3.PublicKey): Promise<{
        [x: string]: any;
    }>;
    /**
     * @deprecated This function is slow and may cause performance issues. Consider using getUserAccountsByAuthority instead.
     */
    getUserAccountsByUser(user: anchor.web3.PublicKey): Promise<anchor.ProgramAccount<{
        [x: string]: any;
    }>[]>;
    /**
     * Gets or creates a user account for a given owner.
     *
     * To use this method, you must first initialize an instance of the SDK and pass a GraphQL client to the constructor.
     * The client will be used to fetch profile information.
     */
    getOrCreate(owner: anchor.web3.PublicKey): Promise<anchor.web3.PublicKey>;
    create(owner: anchor.web3.PublicKey): Promise<{
        instructionMethodBuilder: import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
            name: string;
        }>;
        userPDA: anchor.web3.PublicKey;
    }>;
    update(userAccount: anchor.web3.PublicKey, newAuthority: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
        name: string;
    }>;
    delete(userAccount: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
        name: string;
    }>;
    getUser(owner: anchor.web3.PublicKey): Promise<GumDecodedUser>;
    getAllUsersAccounts(): Promise<GumDecodedUser[]>;
    getUserAccountsByAuthority(userPubkey: anchor.web3.PublicKey): Promise<GumDecodedUser[]>;
}
//# sourceMappingURL=user.d.ts.map