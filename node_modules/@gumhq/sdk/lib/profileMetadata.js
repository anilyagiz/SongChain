"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.ProfileMetadata = void 0;
var graphql_request_1 = require("graphql-request");
var axios_1 = __importDefault(require("axios"));
var ProfileMetadata = /** @class */ (function () {
    function ProfileMetadata(sdk) {
        this.sdk = sdk;
    }
    ProfileMetadata.prototype.get = function (profileMetadataAccount) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sdk.program.account.profileMetadata.fetch(profileMetadataAccount)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @deprecated This function is slow and may cause performance issues. Consider using getProfileMetadataByUser instead.
     */
    ProfileMetadata.prototype.getProfileMetadataAccountsByUser = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var profiles, profilePDAs, profileMetadataList, _i, profilePDAs_1, profilePDA, profileMetadata;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sdk.profile.getProfileAccountsByUser(user)];
                    case 1:
                        profiles = _a.sent();
                        profilePDAs = profiles.map(function (p) { return p.publicKey; });
                        profileMetadataList = [];
                        _i = 0, profilePDAs_1 = profilePDAs;
                        _a.label = 2;
                    case 2:
                        if (!(_i < profilePDAs_1.length)) return [3 /*break*/, 5];
                        profilePDA = profilePDAs_1[_i];
                        return [4 /*yield*/, this.sdk.program.account.profileMetadata.all([
                                { memcmp: { offset: 8, bytes: profilePDA.toBase58() } },
                            ])];
                    case 3:
                        profileMetadata = _a.sent();
                        if (profileMetadata.length > 0)
                            profileMetadataList = __spreadArray(__spreadArray([], profileMetadataList, true), [profileMetadata], false);
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, profileMetadataList];
                }
            });
        });
    };
    ProfileMetadata.prototype.create = function (metadataUri, profileAccount, userAccount, owner) {
        return __awaiter(this, void 0, void 0, function () {
            var instructionMethodBuilder, pubKeys, profileMetadataPDA;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validateProfileMetadata(metadataUri)];
                    case 1:
                        // Validate Profile Metadata before creating
                        if (!(_a.sent())) {
                            throw new Error("Invalid profile metadata");
                        }
                        instructionMethodBuilder = this.sdk.program.methods
                            .createProfileMetadata(metadataUri)
                            .accounts({
                            profile: profileAccount,
                            user: userAccount,
                            authority: owner
                        });
                        return [4 /*yield*/, instructionMethodBuilder.pubkeys()];
                    case 2:
                        pubKeys = _a.sent();
                        profileMetadataPDA = pubKeys.profileMetadata;
                        return [2 /*return*/, {
                                instructionMethodBuilder: instructionMethodBuilder,
                                profileMetadataPDA: profileMetadataPDA
                            }];
                }
            });
        });
    };
    ProfileMetadata.prototype.update = function (metadataUri, profileMetadataAccount, profileAccount, userAccount, owner) {
        return this.sdk.program.methods
            .updateProfileMetadata(metadataUri)
            .accounts({
            profileMetadata: profileMetadataAccount,
            profile: profileAccount,
            user: userAccount,
            authority: owner
        });
    };
    ProfileMetadata.prototype["delete"] = function (profileMetadataAccount, profileAccount, userAccount, owner) {
        return this.sdk.program.methods
            .deleteProfileMetadata()
            .accounts({
            profileMetadata: profileMetadataAccount,
            profile: profileAccount,
            user: userAccount,
            authority: owner
        });
    };
    ProfileMetadata.prototype.validateProfileMetadata = function (metadataUri) {
        return __awaiter(this, void 0, void 0, function () {
            var uri, data, requiredFields, _i, requiredFields_1, field, fields, _a, fields_1, field, avatarUri, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        uri = new URL(metadataUri);
                        if (!uri.protocol.startsWith("http")) {
                            throw new Error("Invalid URI protocol, must be http or https");
                        }
                        return [4 /*yield*/, axios_1["default"].get(metadataUri)];
                    case 1:
                        data = (_b.sent()).data;
                        requiredFields = ["name", "bio", "username", "avatar"];
                        for (_i = 0, requiredFields_1 = requiredFields; _i < requiredFields_1.length; _i++) {
                            field = requiredFields_1[_i];
                            if (!data[field]) {
                                throw new Error("".concat(field, " is required but missing"));
                            }
                        }
                        fields = ["name", "bio", "username", "avatar"];
                        for (_a = 0, fields_1 = fields; _a < fields_1.length; _a++) {
                            field = fields_1[_a];
                            if (typeof data[field] !== "string") {
                                throw new Error("".concat(field, " must be a string"));
                            }
                        }
                        avatarUri = new URL(data.avatar);
                        if (!avatarUri.protocol.startsWith("http")) {
                            throw new Error("Invalid avatar URI protocol, must be http or https");
                        }
                        // Check if the length of the fields are correct
                        if (data.name.length > 32) {
                            throw new Error("Name must be 32 characters or fewer");
                        }
                        if (data.username.length > 32) {
                            throw new Error("Username must be 32 characters or fewer");
                        }
                        // Check if the fields are empty
                        if (data.name.trim() === "") {
                            throw new Error("Name cannot be empty");
                        }
                        if (data.username.trim() === "") {
                            throw new Error("Username cannot be empty");
                        }
                        return [2 /*return*/, true];
                    case 2:
                        error_1 = _b.sent();
                        throw new Error("Error validating profile metadata: ".concat(error_1.message));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    // GraphQL Query methods
    ProfileMetadata.prototype.getAllProfileMetadata = function () {
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = (0, graphql_request_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      query GetAllProfileMetadata {\n        gum_0_1_0_decoded_profilemetadata {\n          cl_pubkey\n          metadatauri\n          metadata\n          profile\n        }\n      }"], ["\n      query GetAllProfileMetadata {\n        gum_0_1_0_decoded_profilemetadata {\n          cl_pubkey\n          metadatauri\n          metadata\n          profile\n        }\n      }"])));
                        return [4 /*yield*/, this.sdk.gqlClient.request(query)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_profilemetadata];
                }
            });
        });
    };
    ProfileMetadata.prototype.getProfileMetadataByUser = function (userPubKey) {
        return __awaiter(this, void 0, void 0, function () {
            var profiles, profilePDAs, query, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sdk.profile.getProfilesByUser(userPubKey)];
                    case 1:
                        profiles = _a.sent();
                        profilePDAs = profiles.map(function (p) { return p.cl_pubkey; });
                        query = (0, graphql_request_1.gql)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      query GetProfileMetadataByUser {\n        gum_0_1_0_decoded_profilemetadata(where: {profile: {_in: [", "] }}) {\n          cl_pubkey\n          metadatauri\n          metadata\n          profile\n        }\n      }"], ["\n      query GetProfileMetadataByUser {\n        gum_0_1_0_decoded_profilemetadata(where: {profile: {_in: [", "] }}) {\n          cl_pubkey\n          metadatauri\n          metadata\n          profile\n        }\n      }"])), profilePDAs.map(function (pda) { return "\"".concat(pda, "\""); }).join(","));
                        return [4 /*yield*/, this.sdk.gqlClient.request(query)];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_profilemetadata];
                }
            });
        });
    };
    ProfileMetadata.prototype.getProfileMetadataByUserAndNamespace = function (userPubKey, namespace) {
        return __awaiter(this, void 0, void 0, function () {
            var profiles, profilePDA, query, variables, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sdk.profile.getProfilesByUserAndNamespace(userPubKey, namespace)];
                    case 1:
                        profiles = _a.sent();
                        profilePDA = profiles.cl_pubkey;
                        query = (0, graphql_request_1.gql)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      query GetProfileMetadataByUserAndNamespace($profilePDA: String) {\n        gum_0_1_0_decoded_profilemetadata(where: { profile: { _eq: $profilePDA } }) {\n          cl_pubkey\n          metadatauri\n          metadata\n          profile\n        }\n      }\n    "], ["\n      query GetProfileMetadataByUserAndNamespace($profilePDA: String) {\n        gum_0_1_0_decoded_profilemetadata(where: { profile: { _eq: $profilePDA } }) {\n          cl_pubkey\n          metadatauri\n          metadata\n          profile\n        }\n      }\n    "])));
                        variables = { profilePDA: profilePDA };
                        return [4 /*yield*/, this.sdk.gqlClient.request(query, variables)];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_profilemetadata[0]];
                }
            });
        });
    };
    ProfileMetadata.prototype.getProfileMetadataByProfile = function (profileAccount) {
        return __awaiter(this, void 0, void 0, function () {
            var query, variables, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = (0, graphql_request_1.gql)(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n      query GetProfileMetadataByProfile($profileAccount: String) {\n        gum_0_1_0_decoded_profilemetadata(where: { profile: { _eq: $profileAccount } }) {\n          cl_pubkey\n          metadatauri\n          metadata\n          profile\n        }\n      }\n    "], ["\n      query GetProfileMetadataByProfile($profileAccount: String) {\n        gum_0_1_0_decoded_profilemetadata(where: { profile: { _eq: $profileAccount } }) {\n          cl_pubkey\n          metadatauri\n          metadata\n          profile\n        }\n      }\n    "])));
                        variables = { profileAccount: profileAccount.toString() };
                        return [4 /*yield*/, this.sdk.gqlClient.request(query, variables)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_profilemetadata[0]];
                }
            });
        });
    };
    return ProfileMetadata;
}());
exports.ProfileMetadata = ProfileMetadata;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
