import { SDK } from ".";
import * as anchor from "@project-serum/anchor";
import { Namespace } from "./profile";
export interface GraphQLPost {
    cl_pubkey: string;
    metadata: string;
    metadatauri: string;
    profile: string;
}
export interface GraphQLFeed {
    cl_pubkey: string;
    metadata: string;
    metadatauri: string;
    profile: string;
    profile_metadata: string;
    profile_metadata_uri: string;
}
export declare class Post {
    readonly sdk: SDK;
    constructor(sdk: SDK);
    get(postAccount: anchor.web3.PublicKey): Promise<{
        [x: string]: any;
    }>;
    /**
     * @deprecated This function is slow and may cause performance issues. Consider using getPostsByUser instead.
     */
    getPostAccountsByUser(userPubKey: anchor.web3.PublicKey): Promise<anchor.ProgramAccount<any>[]>;
    create(metadataUri: String, profileAccount: anchor.web3.PublicKey, userAccount: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): Promise<{
        instructionMethodBuilder: import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
            name: string;
        }>;
        postPDA: anchor.web3.PublicKey;
    }>;
    update(newMetadataUri: String, postAccount: anchor.web3.PublicKey, profileAccount: anchor.web3.PublicKey, userAccount: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): Promise<import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
        name: string;
    }>>;
    delete(postAccount: anchor.web3.PublicKey, profileAccount: anchor.web3.PublicKey, userAccount: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
        name: string;
    }>;
    reply(replyToPostAccount: anchor.web3.PublicKey, metadataUri: String, profileAccount: anchor.web3.PublicKey, userAccount: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): Promise<{
        instructionMethodBuilder: import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
            name: string;
        }>;
        postPDA: anchor.web3.PublicKey;
    }>;
    getAllPosts(): Promise<GraphQLPost[]>;
    getPostsByUser(userPubKey: anchor.web3.PublicKey): Promise<GraphQLPost[]>;
    getPostsByProfile(profilePubKey: anchor.web3.PublicKey): Promise<GraphQLPost[]>;
    getPostsByNamespace(namespace: Namespace): Promise<GraphQLPost[]>;
    getPostsByFollowedUsers(profileAccount: anchor.web3.PublicKey): Promise<GraphQLPost[]>;
    getFeedsByFollowedUsers(profileAccount: anchor.web3.PublicKey): Promise<GraphQLFeed[]>;
}
//# sourceMappingURL=post.d.ts.map