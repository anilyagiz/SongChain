import { SDK } from ".";
import * as anchor from "@project-serum/anchor";
import { Namespace } from "./profile";
export type ProfileMetadataType = {
    name: string;
    bio: string;
    username: string;
    avatar: string;
};
export interface GraphQLProfileMetadata {
    metadatauri: string;
    metadata: string;
    profile: string;
    cl_pubkey: string;
}
export declare class ProfileMetadata {
    readonly sdk: SDK;
    constructor(sdk: SDK);
    get(profileMetadataAccount: anchor.web3.PublicKey): Promise<{
        [x: string]: any;
    }>;
    /**
     * @deprecated This function is slow and may cause performance issues. Consider using getProfileMetadataByUser instead.
     */
    getProfileMetadataAccountsByUser(user: anchor.web3.PublicKey): Promise<anchor.ProgramAccount<any>[]>;
    create(metadataUri: String, profileAccount: anchor.web3.PublicKey, userAccount: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): Promise<{
        instructionMethodBuilder: import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
            name: string;
        }>;
        profileMetadataPDA: anchor.web3.PublicKey;
    }>;
    update(metadataUri: String, profileMetadataAccount: anchor.web3.PublicKey, profileAccount: anchor.web3.PublicKey, userAccount: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
        name: string;
    }>;
    delete(profileMetadataAccount: anchor.web3.PublicKey, profileAccount: anchor.web3.PublicKey, userAccount: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
        name: string;
    }>;
    validateProfileMetadata(metadataUri: string): Promise<boolean>;
    getAllProfileMetadata(): Promise<GraphQLProfileMetadata[]>;
    getProfileMetadataByUser(userPubKey: anchor.web3.PublicKey): Promise<GraphQLProfileMetadata[]>;
    getProfileMetadataByUserAndNamespace(userPubKey: anchor.web3.PublicKey, namespace: Namespace): Promise<GraphQLProfileMetadata>;
    getProfileMetadataByProfile(profileAccount: anchor.web3.PublicKey): Promise<GraphQLProfileMetadata>;
}
//# sourceMappingURL=profileMetadata.d.ts.map