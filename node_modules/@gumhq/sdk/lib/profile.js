"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.Profile = void 0;
var graphql_request_1 = require("graphql-request");
var anchor = __importStar(require("@project-serum/anchor"));
var Profile = /** @class */ (function () {
    function Profile(sdk) {
        this.sdk = sdk;
    }
    Profile.prototype.get = function (profileAccount) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sdk.program.account.profile.fetch(profileAccount)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @deprecated This function is slow and may cause performance issues. Consider using getProfilesByUser instead.
     */
    Profile.prototype.getProfileAccountsByUser = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var users, userPDAs, profiles, _i, userPDAs_1, userPDA, profile;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sdk.user.getUserAccountsByUser(user)];
                    case 1:
                        users = _a.sent();
                        userPDAs = users.map(function (u) { return u.publicKey; });
                        profiles = [];
                        _i = 0, userPDAs_1 = userPDAs;
                        _a.label = 2;
                    case 2:
                        if (!(_i < userPDAs_1.length)) return [3 /*break*/, 5];
                        userPDA = userPDAs_1[_i];
                        return [4 /*yield*/, this.sdk.program.account.profile.all([
                                { memcmp: { offset: 8, bytes: userPDA.toBase58() } },
                            ])];
                    case 3:
                        profile = _a.sent();
                        profiles = __spreadArray(__spreadArray([], profiles, true), profile, true);
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, profiles];
                }
            });
        });
    };
    /**
     * Gets or creates a profile for a given user account and namespace.
     *
     * To use this method, you must first initialize an instance of the SDK and pass a GraphQL client to the constructor.
     * The client will be used to fetch profile information.
     */
    Profile.prototype.getOrCreate = function (metadataUri, userAccount, namespace, owner) {
        return __awaiter(this, void 0, void 0, function () {
            var profile, profilePDAstr, profilePDA, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, this.getProfile(userAccount, namespace)];
                    case 1:
                        profile = _a.sent();
                        if ((profile === null || profile === void 0 ? void 0 : profile.username) && (profile === null || profile === void 0 ? void 0 : profile.namespace) && (profile === null || profile === void 0 ? void 0 : profile.cl_pubkey)) {
                            profilePDAstr = profile.cl_pubkey;
                            return [2 /*return*/, new anchor.web3.PublicKey(profilePDAstr)];
                        }
                        return [4 /*yield*/, this.createProfileWithProfileMetadata(metadataUri, userAccount, namespace, owner)];
                    case 2:
                        profilePDA = _a.sent();
                        return [2 /*return*/, profilePDA];
                    case 3:
                        e_1 = _a.sent();
                        throw new Error("Error getting or creating profile: ".concat(e_1.message));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Profile.prototype.create = function (userAccount, namespace, owner) {
        return __awaiter(this, void 0, void 0, function () {
            var instructionMethodBuilder, pubKeys, profilePDA;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        instructionMethodBuilder = this.sdk.program.methods
                            .createProfile(namespace)
                            .accounts({
                            user: userAccount,
                            authority: owner
                        });
                        return [4 /*yield*/, instructionMethodBuilder.pubkeys()];
                    case 1:
                        pubKeys = _a.sent();
                        profilePDA = pubKeys.profile;
                        return [2 /*return*/, {
                                instructionMethodBuilder: instructionMethodBuilder,
                                profilePDA: profilePDA
                            }];
                }
            });
        });
    };
    Profile.prototype.createProfileWithProfileMetadata = function (metadataUri, userAccount, namespace, owner) {
        return __awaiter(this, void 0, void 0, function () {
            var createProfile, profilePDA, profileMetadata, profileMetadataIx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.create(userAccount, namespace, owner)];
                    case 1:
                        createProfile = _a.sent();
                        profilePDA = createProfile.profilePDA;
                        return [4 /*yield*/, this.sdk.profileMetadata.create(metadataUri, profilePDA, userAccount, owner)];
                    case 2:
                        profileMetadata = _a.sent();
                        return [4 /*yield*/, profileMetadata.instructionMethodBuilder.instruction()];
                    case 3:
                        profileMetadataIx = _a.sent();
                        return [4 /*yield*/, createProfile.instructionMethodBuilder.postInstructions([profileMetadataIx]).rpc()];
                    case 4:
                        _a.sent();
                        return [2 /*return*/, profilePDA];
                }
            });
        });
    };
    Profile.prototype["delete"] = function (profileAccount, userAccount, owner) {
        var program = this.sdk.program;
        return program.methods
            .deleteProfile()
            .accounts({
            profile: profileAccount,
            user: userAccount,
            authority: owner
        });
    };
    // GraphQL API methods
    Profile.prototype.getProfile = function (userAccount, namespace) {
        return __awaiter(this, void 0, void 0, function () {
            var namespaceString, query, variables, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        namespaceString = JSON.stringify((_a = {}, _a[namespace.toLowerCase()] = {}, _a));
                        query = (0, graphql_request_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      query GetProfile ($namespace: String) {\n        gum_0_1_0_decoded_profile(\n          where: {\n            username: { _eq: \"", "\" },\n            namespace: { _eq: $namespace }\n          }\n        ) {\n          username\n          namespace\n          cl_pubkey\n        }\n      }"], ["\n      query GetProfile ($namespace: String) {\n        gum_0_1_0_decoded_profile(\n          where: {\n            username: { _eq: \"", "\" },\n            namespace: { _eq: $namespace }\n          }\n        ) {\n          username\n          namespace\n          cl_pubkey\n        }\n      }"])), userAccount);
                        variables = { namespace: namespaceString };
                        return [4 /*yield*/, this.sdk.gqlClient.request(query, variables)];
                    case 1:
                        data = _b.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_profile[0]];
                }
            });
        });
    };
    Profile.prototype.getAllProfiles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = (0, graphql_request_1.gql)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      query AllProfiles {\n        gum_0_1_0_decoded_profile {\n          username\n          namespace\n          cl_pubkey\n        }\n      }"], ["\n      query AllProfiles {\n        gum_0_1_0_decoded_profile {\n          username\n          namespace\n          cl_pubkey\n        }\n      }"])));
                        return [4 /*yield*/, this.sdk.gqlClient.request(query)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_profile];
                }
            });
        });
    };
    Profile.prototype.getProfilesByUser = function (userPubkey) {
        return __awaiter(this, void 0, void 0, function () {
            var users, userPDAs, query, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sdk.user.getUserAccountsByAuthority(userPubkey)];
                    case 1:
                        users = _a.sent();
                        userPDAs = users.map(function (user) { return user.cl_pubkey; });
                        query = (0, graphql_request_1.gql)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      query UserProfiles {\n        gum_0_1_0_decoded_profile(\n          where: {username: {_in: [", "] }}\n        ) {\n          username\n          namespace\n          cl_pubkey\n        }\n      }\n      "], ["\n      query UserProfiles {\n        gum_0_1_0_decoded_profile(\n          where: {username: {_in: [", "] }}\n        ) {\n          username\n          namespace\n          cl_pubkey\n        }\n      }\n      "])), userPDAs.map(function (pda) { return "\"".concat(pda, "\""); }).join(','));
                        return [4 /*yield*/, this.sdk.gqlClient.request(query)];
                    case 2:
                        data = _a.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_profile];
                }
            });
        });
    };
    Profile.prototype.getProfilesByNamespace = function (namespace) {
        return __awaiter(this, void 0, void 0, function () {
            var namespaceString, query, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        namespaceString = JSON.stringify((_a = {}, _a[namespace.toLowerCase()] = {}, _a));
                        query = (0, graphql_request_1.gql)(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n      query ProfilesByNamespace ($namespace: String) {\n        gum_0_1_0_decoded_profile(where: { namespace: { _eq: $namespace } }) {\n          username\n          namespace\n          cl_pubkey\n        }\n      }\n    "], ["\n      query ProfilesByNamespace ($namespace: String) {\n        gum_0_1_0_decoded_profile(where: { namespace: { _eq: $namespace } }) {\n          username\n          namespace\n          cl_pubkey\n        }\n      }\n    "])));
                        return [4 /*yield*/, this.sdk.gqlClient.request(query, { namespace: namespaceString })];
                    case 1:
                        data = _b.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_profile];
                }
            });
        });
    };
    Profile.prototype.getProfilesByUserAndNamespace = function (userPubkey, namespace) {
        return __awaiter(this, void 0, void 0, function () {
            var users, userPDAs, namespaceString, query, data;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.sdk.user.getUserAccountsByAuthority(userPubkey)];
                    case 1:
                        users = _b.sent();
                        userPDAs = users.map(function (user) { return user.cl_pubkey; });
                        namespaceString = JSON.stringify((_a = {}, _a[namespace.toLowerCase()] = {}, _a));
                        query = (0, graphql_request_1.gql)(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n      query ProfileByUserAndNamespace ($namespace: String) {\n        gum_0_1_0_decoded_profile(\n          where: {\n            username: {_in: [", "] },\n            namespace: { _eq: $namespace }\n          }\n        ) {\n          username\n          namespace\n          cl_pubkey\n        }\n      }\n    "], ["\n      query ProfileByUserAndNamespace ($namespace: String) {\n        gum_0_1_0_decoded_profile(\n          where: {\n            username: {_in: [", "] },\n            namespace: { _eq: $namespace }\n          }\n        ) {\n          username\n          namespace\n          cl_pubkey\n        }\n      }\n    "])), userPDAs.map(function (pda) { return "\"".concat(pda, "\""); }).join(','));
                        return [4 /*yield*/, this.sdk.gqlClient.request(query, { namespace: namespaceString })];
                    case 2:
                        data = _b.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_profile[0]];
                }
            });
        });
    };
    return Profile;
}());
exports.Profile = Profile;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
