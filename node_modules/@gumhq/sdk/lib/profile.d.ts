import { SDK } from ".";
import * as anchor from "@project-serum/anchor";
export type Namespace = "Professional" | "Personal" | "Gaming" | "Degen";
export interface GumDecodedProfile {
    username: string;
    namespace: string;
    cl_pubkey: string;
}
export declare class Profile {
    private readonly sdk;
    constructor(sdk: SDK);
    get(profileAccount: anchor.web3.PublicKey): Promise<{
        [x: string]: any;
    }>;
    /**
     * @deprecated This function is slow and may cause performance issues. Consider using getProfilesByUser instead.
     */
    getProfileAccountsByUser(user: anchor.web3.PublicKey): Promise<anchor.ProgramAccount<any>[]>;
    /**
     * Gets or creates a profile for a given user account and namespace.
     *
     * To use this method, you must first initialize an instance of the SDK and pass a GraphQL client to the constructor.
     * The client will be used to fetch profile information.
     */
    getOrCreate(metadataUri: String, userAccount: anchor.web3.PublicKey, namespace: Namespace, owner: anchor.web3.PublicKey): Promise<anchor.web3.PublicKey>;
    create(userAccount: anchor.web3.PublicKey, namespace: Namespace, owner: anchor.web3.PublicKey): Promise<{
        instructionMethodBuilder: import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
            name: string;
        }>;
        profilePDA: anchor.web3.PublicKey;
    }>;
    createProfileWithProfileMetadata(metadataUri: String, userAccount: anchor.web3.PublicKey, namespace: Namespace, owner: anchor.web3.PublicKey): Promise<anchor.web3.PublicKey>;
    delete(profileAccount: anchor.web3.PublicKey, userAccount: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
        name: string;
    }>;
    getProfile(userAccount: anchor.web3.PublicKey, namespace: Namespace): Promise<GumDecodedProfile>;
    getAllProfiles(): Promise<GumDecodedProfile[]>;
    getProfilesByUser(userPubkey: anchor.web3.PublicKey): Promise<GumDecodedProfile[]>;
    getProfilesByNamespace(namespace: Namespace): Promise<GumDecodedProfile[]>;
    getProfilesByUserAndNamespace(userPubkey: anchor.web3.PublicKey, namespace: Namespace): Promise<GumDecodedProfile>;
}
//# sourceMappingURL=profile.d.ts.map