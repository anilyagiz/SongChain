"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.User = void 0;
var anchor = __importStar(require("@project-serum/anchor"));
var randombytes_1 = __importDefault(require("randombytes"));
var graphql_request_1 = require("graphql-request");
var User = /** @class */ (function () {
    function User(sdk) {
        this.sdk = sdk;
    }
    User.prototype.userPDA = function (randomHash) {
        return __awaiter(this, void 0, void 0, function () {
            var program, userPDA;
            return __generator(this, function (_a) {
                program = this.sdk.program;
                userPDA = anchor.web3.PublicKey.findProgramAddressSync([Buffer.from("user"), randomHash], program.programId)[0];
                return [2 /*return*/, userPDA];
            });
        });
    };
    User.prototype.get = function (userAccount) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sdk.program.account.user.fetch(userAccount)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @deprecated This function is slow and may cause performance issues. Consider using getUserAccountsByAuthority instead.
     */
    User.prototype.getUserAccountsByUser = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.sdk.program.account.user.all([
                            { memcmp: { offset: 8, bytes: user.toBase58() } },
                        ])];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Gets or creates a user account for a given owner.
     *
     * To use this method, you must first initialize an instance of the SDK and pass a GraphQL client to the constructor.
     * The client will be used to fetch profile information.
     */
    User.prototype.getOrCreate = function (owner) {
        return __awaiter(this, void 0, void 0, function () {
            var user, userPDAstr, _a, instructionMethodBuilder, userPDA, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, this.getUser(owner)];
                    case 1:
                        user = _b.sent();
                        if ((user === null || user === void 0 ? void 0 : user.authority) && (user === null || user === void 0 ? void 0 : user.cl_pubkey) && (user === null || user === void 0 ? void 0 : user.randomhash)) {
                            userPDAstr = user.cl_pubkey;
                            return [2 /*return*/, new anchor.web3.PublicKey(userPDAstr)];
                        }
                        return [4 /*yield*/, this.create(owner)];
                    case 2:
                        _a = _b.sent(), instructionMethodBuilder = _a.instructionMethodBuilder, userPDA = _a.userPDA;
                        return [4 /*yield*/, instructionMethodBuilder.rpc()];
                    case 3:
                        _b.sent();
                        return [2 /*return*/, userPDA];
                    case 4:
                        err_1 = _b.sent();
                        throw new Error("Error getting or creating user: ".concat(err_1.message));
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    User.prototype.create = function (owner) {
        return __awaiter(this, void 0, void 0, function () {
            var randomHash, instructionMethodBuilder, pubKeys, userPDA;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        randomHash = (0, randombytes_1["default"])(32);
                        instructionMethodBuilder = this.sdk.program.methods
                            .createUser(randomHash)
                            .accounts({
                            authority: owner
                        });
                        return [4 /*yield*/, instructionMethodBuilder.pubkeys()];
                    case 1:
                        pubKeys = _a.sent();
                        userPDA = pubKeys.user;
                        return [2 /*return*/, {
                                instructionMethodBuilder: instructionMethodBuilder,
                                userPDA: userPDA
                            }];
                }
            });
        });
    };
    User.prototype.update = function (userAccount, newAuthority, owner) {
        var program = this.sdk.program;
        return program.methods
            .updateUser()
            .accounts({
            user: userAccount,
            newAuthority: newAuthority,
            authority: owner
        });
    };
    User.prototype["delete"] = function (userAccount, owner) {
        var program = this.sdk.program;
        return program.methods
            .deleteUser()
            .accounts({
            user: userAccount,
            authority: owner
        });
    };
    // GraphQL API methods
    User.prototype.getUser = function (owner) {
        return __awaiter(this, void 0, void 0, function () {
            var query, variables, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = (0, graphql_request_1.gql)(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      query GetUser ($owner: String!) {\n        gum_0_1_0_decoded_user(where: { authority: { _eq: $owner } }) {\n          authority\n          cl_pubkey\n          randomhash\n        }\n      }\n    "], ["\n      query GetUser ($owner: String!) {\n        gum_0_1_0_decoded_user(where: { authority: { _eq: $owner } }) {\n          authority\n          cl_pubkey\n          randomhash\n        }\n      }\n    "])));
                        variables = {
                            owner: owner.toBase58()
                        };
                        return [4 /*yield*/, this.sdk.gqlClient.request(query, variables)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_user[0]];
                }
            });
        });
    };
    User.prototype.getAllUsersAccounts = function () {
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = (0, graphql_request_1.gql)(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      query AllUsersAccounts {\n        gum_0_1_0_decoded_user {\n          authority\n          cl_pubkey\n          randomhash\n        }\n      }\n    "], ["\n      query AllUsersAccounts {\n        gum_0_1_0_decoded_user {\n          authority\n          cl_pubkey\n          randomhash\n        }\n      }\n    "])));
                        return [4 /*yield*/, this.sdk.gqlClient.request(query)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_user];
                }
            });
        });
    };
    User.prototype.getUserAccountsByAuthority = function (userPubkey) {
        return __awaiter(this, void 0, void 0, function () {
            var query, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = (0, graphql_request_1.gql)(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      query UserAccounts {\n        gum_0_1_0_decoded_user(where: { authority: { _eq: \"", "\" } }) {\n          authority\n          cl_pubkey\n          randomhash\n        }\n      }\n    "], ["\n      query UserAccounts {\n        gum_0_1_0_decoded_user(where: { authority: { _eq: \"", "\" } }) {\n          authority\n          cl_pubkey\n          randomhash\n        }\n      }\n    "])), userPubkey);
                        return [4 /*yield*/, this.sdk.gqlClient.request(query)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.gum_0_1_0_decoded_user];
                }
            });
        });
    };
    return User;
}());
exports.User = User;
var templateObject_1, templateObject_2, templateObject_3;
