import { SDK } from ".";
import * as anchor from "@project-serum/anchor";
export interface GraphQLConnection {
    fromprofile: string;
    toprofile: string;
    cl_pubkey: string;
}
export declare class Connection {
    readonly sdk: SDK;
    constructor(sdk: SDK);
    get(connectionAccount: anchor.web3.PublicKey): Promise<{
        [x: string]: any;
    }>;
    create(fromProfile: anchor.web3.PublicKey, toProfile: anchor.web3.PublicKey, userAccount: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): Promise<{
        instructionMethodBuilder: import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
            name: string;
        }>;
        connectionPDA: anchor.web3.PublicKey;
    }>;
    delete(connectionAccount: anchor.web3.PublicKey, fromProfile: anchor.web3.PublicKey, toProfile: anchor.web3.PublicKey, userAccount: anchor.web3.PublicKey, owner: anchor.web3.PublicKey): import("@project-serum/anchor/dist/cjs/program/namespace/methods").MethodsBuilder<anchor.Idl, import("@project-serum/anchor/dist/cjs/idl").IdlInstruction & {
        name: string;
    }>;
    getAllConnections(): Promise<GraphQLConnection[]>;
    getConnectionsByUser(userPubKey: anchor.web3.PublicKey): Promise<GraphQLConnection[]>;
    getFollowersByProfile(profileAccount: anchor.web3.PublicKey): Promise<string[]>;
    getFollowingsByProfile(profileAccount: anchor.web3.PublicKey): Promise<string[]>;
}
//# sourceMappingURL=connection.d.ts.map