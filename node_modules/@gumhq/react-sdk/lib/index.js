// src/hooks/user/useUser.ts
import { useState, useEffect, useCallback } from "react";
var useUser = (sdk, userAccount) => {
  const [user, setUser] = useState(null);
  const [userLoading, setUserLoading] = useState(false);
  const [userError, setUserError] = useState(null);
  const fetchUser = useCallback(
    async () => {
      setUserLoading(true);
      setUserError(null);
      try {
        const data = await sdk.user.get(userAccount);
        setUser(data);
      } catch (err) {
        setUserError(err);
      } finally {
        setUserLoading(false);
      }
    },
    [sdk, userAccount]
  );
  useEffect(() => {
    fetchUser();
  }, []);
  return { user, userLoading, userError };
};

// src/hooks/user/useCreateUser.ts
import { useState as useState2, useCallback as useCallback2 } from "react";
var useCreateUser = (sdk) => {
  const [userPDA, setUserPDA] = useState2(null);
  const [isCreatingUser, setIsCreatingUser] = useState2(false);
  const [createUserError, setCreateUserError] = useState2(null);
  const create = useCallback2(
    async (owner) => {
      setIsCreatingUser(true);
      setCreateUserError(null);
      try {
        const data = await createUserIxMethodBuilder(owner);
        await data?.rpc();
      } catch (err) {
        setCreateUserError(err);
      } finally {
        setIsCreatingUser(false);
      }
    },
    [sdk]
  );
  const getOrCreate = useCallback2(
    async (owner) => {
      setIsCreatingUser(true);
      setCreateUserError(null);
      try {
        const userPDA2 = await sdk.user.getOrCreate(owner);
        setUserPDA(userPDA2);
      } catch (err) {
        setCreateUserError(err);
      } finally {
        setIsCreatingUser(false);
      }
    },
    [sdk]
  );
  const createUserIxMethodBuilder = useCallback2(
    async (owner) => {
      setCreateUserError(null);
      try {
        const user = await sdk.user.create(owner);
        setUserPDA(user?.userPDA);
        return user.instructionMethodBuilder;
      } catch (err) {
        setCreateUserError(err);
        return null;
      }
    },
    [sdk]
  );
  return {
    create,
    getOrCreate,
    createUserIxMethodBuilder,
    userPDA,
    isCreatingUser,
    createUserError
  };
};

// src/hooks/profile/useProfile.ts
import { useState as useState3, useEffect as useEffect2, useCallback as useCallback3 } from "react";
var useProfile = (sdk, profileAccount) => {
  const [profile, setProfile] = useState3(null);
  const [profileLoading, setProfileLoading] = useState3(false);
  const [profileError, setProfileError] = useState3(null);
  const fetchProfile = useCallback3(
    async () => {
      setProfileLoading(true);
      setProfileError(null);
      try {
        const data = await sdk.profileMetadata.getProfileMetadataByProfile(profileAccount);
        setProfile(data);
      } catch (err) {
        setProfileError(err);
      } finally {
        setProfileLoading(false);
      }
    },
    [sdk, profileAccount]
  );
  useEffect2(() => {
    fetchProfile();
  }, []);
  return { profile, profileLoading, profileError };
};

// src/hooks/profile/useCreateProfile.ts
import { useState as useState4, useCallback as useCallback4 } from "react";
var useCreateProfile = (sdk) => {
  const [profilePDA, setProfilePDA] = useState4(null);
  const [isCreatingProfile, setIsCreatingProfile] = useState4(false);
  const [createProfileError, setCreateProfileError] = useState4(null);
  const create = useCallback4(
    async (metadataUri, namespace, userAccount, owner) => {
      setIsCreatingProfile(true);
      setCreateProfileError(null);
      try {
        const ixMethodBuilder = await createProfileIxMethodBuilder(metadataUri, namespace, userAccount, owner);
        await ixMethodBuilder?.rpc();
      } catch (err) {
        setCreateProfileError(err);
      } finally {
        setIsCreatingProfile(false);
      }
    },
    [sdk]
  );
  const getOrCreate = useCallback4(
    async (metadataUri, namespace, userAccount, owner) => {
      setIsCreatingProfile(true);
      setCreateProfileError(null);
      try {
        const profilePDA2 = await sdk.profile.getOrCreate(metadataUri, userAccount, namespace, owner);
        setProfilePDA(profilePDA2);
      } catch (err) {
        setCreateProfileError(err);
      } finally {
        setIsCreatingProfile(false);
      }
    },
    [sdk]
  );
  const createProfileIxMethodBuilder = useCallback4(
    async (metadataUri, namespace, userAccount, owner) => {
      setCreateProfileError(null);
      try {
        const createProfile = await sdk.profile.create(userAccount, namespace, owner);
        const profileMetadata = await sdk.profileMetadata.create(metadataUri, createProfile.profilePDA, userAccount, owner);
        const profileMetadataIx = await profileMetadata.instructionMethodBuilder.instruction();
        const data = {
          instructionMethodBuilder: createProfile.instructionMethodBuilder.postInstructions(
            [profileMetadataIx]
          ),
          profilePDA: createProfile.profilePDA
        };
        setProfilePDA(data.profilePDA);
        return data.instructionMethodBuilder;
      } catch (err) {
        setCreateProfileError(err);
        return null;
      }
    },
    [sdk]
  );
  return {
    create,
    getOrCreate,
    createProfileIxMethodBuilder,
    profilePDA,
    isCreatingProfile,
    createProfileError
  };
};

// src/hooks/post/usePost.ts
import { useState as useState5, useEffect as useEffect3, useCallback as useCallback5 } from "react";
var usePost = (sdk, postAccount) => {
  const [post, setPost] = useState5(null);
  const [postLoading, setPostLoading] = useState5(false);
  const [postError, setPostError] = useState5(null);
  const fetchPost = useCallback5(
    async () => {
      setPostLoading(true);
      setPostError(null);
      try {
        const data = await sdk.post.get(postAccount);
        setPost(data);
      } catch (err) {
        setPostError(err);
      } finally {
        setPostLoading(false);
      }
    },
    [sdk, postAccount]
  );
  useEffect3(() => {
    fetchPost();
  }, []);
  return { post, postLoading, postError };
};

// src/hooks/post/useCreatePost.ts
import { useState as useState6, useCallback as useCallback6 } from "react";
var useCreatePost = (sdk) => {
  const [postPDA, setPostPDA] = useState6(null);
  const [isCreatingPost, setIsCreatingPost] = useState6(false);
  const [createPostError, setCreatePostError] = useState6(null);
  const create = useCallback6(
    async (metadataUri, profileAccount, userAccount, owner) => {
      setIsCreatingPost(true);
      setCreatePostError(null);
      try {
        const instructionMethodBuilder = await createPostIxMethodBuilder(metadataUri, profileAccount, userAccount, owner);
        await instructionMethodBuilder?.rpc();
      } catch (err) {
        setCreatePostError(err);
      } finally {
        setIsCreatingPost(false);
      }
    },
    [sdk]
  );
  const createPostIxMethodBuilder = useCallback6(
    async (metadataUri, profileAccount, userAccount, owner) => {
      setCreatePostError(null);
      try {
        const data = await sdk.post.create(metadataUri, profileAccount, userAccount, owner);
        setPostPDA(data.postPDA);
        return data.instructionMethodBuilder;
      } catch (err) {
        setCreatePostError(err);
        return null;
      }
    },
    [sdk]
  );
  return {
    create,
    createPostIxMethodBuilder,
    postPDA,
    isCreatingPost,
    createPostError
  };
};

// src/hooks/post/useFeed.ts
import { useState as useState7, useEffect as useEffect4, useCallback as useCallback7 } from "react";
var useFeed = (sdk, profileAccount) => {
  const [feedData, setFeedData] = useState7(null);
  const [feedLoading, setFeedLoading] = useState7(false);
  const [feedError, setFeedError] = useState7(null);
  const fetchFeed = useCallback7(
    async () => {
      setFeedLoading(true);
      setFeedError(null);
      try {
        const data = await sdk.post.getFeedsByFollowedUsers(profileAccount);
        setFeedData(data);
      } catch (err) {
        setFeedError(err);
      } finally {
        setFeedLoading(false);
      }
    },
    [sdk, profileAccount]
  );
  useEffect4(() => {
    fetchFeed();
  }, []);
  return { feedData, feedLoading, feedError };
};

// src/hooks/post/useExploreFeed.ts
import { useState as useState8, useEffect as useEffect5, useCallback as useCallback8 } from "react";
var useExploreFeed = (sdk, namespace) => {
  const [exploreFeedData, setExploreFeedData] = useState8(null);
  const [exploreFeedLoading, setExploreFeedLoading] = useState8(false);
  const [exploreFeedError, setExploreFeedError] = useState8(null);
  const fetchExploreFeed = useCallback8(
    async () => {
      setExploreFeedLoading(true);
      setExploreFeedError(null);
      try {
        const data = await sdk.post.getPostsByNamespace(namespace);
        setExploreFeedData(data);
      } catch (err) {
        setExploreFeedError(err);
      } finally {
        setExploreFeedLoading(false);
      }
    },
    [sdk, namespace]
  );
  useEffect5(() => {
    fetchExploreFeed();
  }, []);
  return { exploreFeedData, exploreFeedLoading, exploreFeedError };
};

// src/hooks/reaction/useReaction.ts
import { useState as useState9, useCallback as useCallback9 } from "react";
var useReaction = (sdk) => {
  const [reactionPDA, setReactionPDA] = useState9(null);
  const [isReacting, setIsReacting] = useState9(false);
  const [createReactionError, setCreateReactionError] = useState9(null);
  const createReaction = useCallback9(
    async (reactionType, fromProfile, toPostAccount, userAccount, owner) => {
      setIsReacting(true);
      setCreateReactionError(null);
      try {
        const ixMethodBuilder = await createReactionIxMethodBuilder(reactionType, fromProfile, toPostAccount, userAccount, owner);
        await ixMethodBuilder?.rpc();
      } catch (err) {
        setCreateReactionError(err);
      } finally {
        setIsReacting(false);
      }
    },
    [sdk]
  );
  const createReactionIxMethodBuilder = useCallback9(
    async (reactionType, fromProfile, toPostAccount, userAccount, owner) => {
      setCreateReactionError(null);
      try {
        const data = await sdk.reaction.create(fromProfile, toPostAccount, reactionType, userAccount, owner);
        setReactionPDA(data.reactionPDA);
        return data.instructionMethodBuilder;
      } catch (err) {
        setCreateReactionError(err);
        return null;
      }
    },
    [sdk]
  );
  const deleteReaction = useCallback9(
    async (reactionAccount, fromProfile, toPostAccount, userAccount, owner) => {
      setIsReacting(true);
      setCreateReactionError(null);
      try {
        const ixMethodBuilder = await deleteReactionIxMethodBuilder(reactionAccount, fromProfile, toPostAccount, userAccount, owner);
        await ixMethodBuilder?.rpc();
      } catch (err) {
        setCreateReactionError(err);
      } finally {
        setIsReacting(false);
      }
    },
    [sdk]
  );
  const deleteReactionIxMethodBuilder = useCallback9(
    async (reactionAccount, fromProfile, toPostAccount, userAccount, owner) => {
      setCreateReactionError(null);
      try {
        const data = sdk.reaction.delete(reactionAccount, fromProfile, toPostAccount, userAccount, owner);
        return data;
      } catch (err) {
        setCreateReactionError(err);
        return null;
      }
    },
    [sdk]
  );
  return {
    createReaction,
    createReactionIxMethodBuilder,
    deleteReaction,
    deleteReactionIxMethodBuilder,
    reactionPDA,
    isReacting,
    createReactionError
  };
};

// src/hooks/connection/useFollow.ts
import { useState as useState10, useCallback as useCallback10 } from "react";
var useFollow = (sdk) => {
  const [connectionPDA, setConnectionPDA] = useState10(null);
  const [connectionLoading, setConnectionLoading] = useState10(false);
  const [connectionError, setConnectionError] = useState10(null);
  const follow = useCallback10(
    async (fromProfile, toProfile, userAccount, owner) => {
      setConnectionLoading(true);
      setConnectionError(null);
      try {
        const instructionMethodBuilder = await createConnectionIxMethodBuilder(
          fromProfile,
          toProfile,
          userAccount,
          owner
        );
        await instructionMethodBuilder?.rpc();
      } catch (err) {
        setConnectionError(err);
      } finally {
        setConnectionLoading(false);
      }
    },
    [sdk]
  );
  const createConnectionIxMethodBuilder = useCallback10(
    async (fromProfile, toProfile, userAccount, owner) => {
      setConnectionError(null);
      try {
        const connection = await sdk.connection.create(
          fromProfile,
          toProfile,
          userAccount,
          owner
        );
        setConnectionPDA(connection.connectionPDA);
        return connection.instructionMethodBuilder;
      } catch (err) {
        setConnectionError(err);
        return null;
      }
    },
    [sdk]
  );
  return {
    follow,
    createConnectionIxMethodBuilder,
    connectionPDA,
    connectionLoading,
    connectionError
  };
};

// src/hooks/connection/useUnfollow.ts
import { useState as useState11, useCallback as useCallback11 } from "react";
var useUnfollow = (sdk) => {
  const [connectionLoading, setConnectionLoading] = useState11(false);
  const [connectionError, setConnectionError] = useState11(null);
  const unfollow = useCallback11(
    async (connectionAccount, fromProfile, toProfile, userAccount, owner) => {
      setConnectionLoading(true);
      setConnectionError(null);
      try {
        const instructionMethodBuilder = await deleteConnectionIxMethodBuilder(
          connectionAccount,
          fromProfile,
          toProfile,
          userAccount,
          owner
        );
        await instructionMethodBuilder?.rpc();
      } catch (err) {
        setConnectionError(err);
      } finally {
        setConnectionLoading(false);
      }
    },
    [sdk]
  );
  const deleteConnectionIxMethodBuilder = useCallback11(
    async (connectionAccount, fromProfile, toProfile, userAccount, owner) => {
      setConnectionError(null);
      try {
        const data = sdk.connection.delete(
          connectionAccount,
          fromProfile,
          toProfile,
          userAccount,
          owner
        );
        return data;
      } catch (err) {
        setConnectionError(err);
        return null;
      }
    },
    [sdk]
  );
  return {
    unfollow,
    deleteConnectionIxMethodBuilder,
    connectionLoading,
    connectionError
  };
};

// src/hooks/useGum.ts
import { useMemo } from "react";
import { SDK } from "@gumhq/sdk";
var useGum = (wallet, connection, opts, cluster, graphqlClient) => {
  const sdk = useMemo(() => {
    return new SDK(wallet, connection, opts, cluster, graphqlClient);
  }, [wallet]);
  return sdk;
};

// src/index.ts
import {
  SDK as SDK2
} from "@gumhq/sdk";
export {
  SDK2 as SDK,
  useCreatePost,
  useCreateProfile,
  useCreateUser,
  useExploreFeed,
  useFeed,
  useFollow,
  useGum,
  usePost,
  useProfile,
  useReaction,
  useUnfollow,
  useUser
};
