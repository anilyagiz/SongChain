import { SDK } from '@gumhq/sdk';
export { SDK } from '@gumhq/sdk';
import { PublicKey, Connection, ConfirmOptions, Cluster } from '@solana/web3.js';
import * as _project_serum_anchor_dist_cjs_program_namespace_methods from '@project-serum/anchor/dist/cjs/program/namespace/methods';
import * as _project_serum_anchor_dist_cjs_idl from '@project-serum/anchor/dist/cjs/idl';
import * as _project_serum_anchor from '@project-serum/anchor';
import { Namespace } from '@gumhq/sdk/lib/profile';
import { ReactionType } from '@gumhq/sdk/lib/reaction';
import { GraphQLClient } from 'graphql-request';
import { AnchorWallet } from '@solana/wallet-adapter-react';

declare const useUser: (sdk: SDK, userAccount: PublicKey) => {
    user: any;
    userLoading: boolean;
    userError: Error | null;
};

declare const useCreateUser: (sdk: SDK) => {
    create: (owner: PublicKey) => Promise<void>;
    getOrCreate: (owner: PublicKey) => Promise<void>;
    createUserIxMethodBuilder: (owner: PublicKey) => Promise<_project_serum_anchor_dist_cjs_program_namespace_methods.MethodsBuilder<_project_serum_anchor.Idl, _project_serum_anchor_dist_cjs_idl.IdlInstruction & {
        name: string;
    }> | null>;
    userPDA: PublicKey | null;
    isCreatingUser: boolean;
    createUserError: Error | null;
};

declare const useProfile: (sdk: SDK, profileAccount: PublicKey) => {
    profile: any;
    profileLoading: boolean;
    profileError: Error | null;
};

declare const useCreateProfile: (sdk: SDK) => {
    create: (metadataUri: String, namespace: Namespace, userAccount: PublicKey, owner: PublicKey) => Promise<void>;
    getOrCreate: (metadataUri: String, namespace: Namespace, userAccount: PublicKey, owner: PublicKey) => Promise<void>;
    createProfileIxMethodBuilder: (metadataUri: String, namespace: Namespace, userAccount: PublicKey, owner: PublicKey) => Promise<_project_serum_anchor_dist_cjs_program_namespace_methods.MethodsBuilder<_project_serum_anchor.Idl, _project_serum_anchor_dist_cjs_idl.IdlInstruction & {
        name: string;
    }> | null>;
    profilePDA: PublicKey | null;
    isCreatingProfile: boolean;
    createProfileError: Error | null;
};

declare const usePost: (sdk: SDK, postAccount: PublicKey) => {
    post: any;
    postLoading: boolean;
    postError: Error | null;
};

declare const useCreatePost: (sdk: SDK) => {
    create: (metadataUri: String, profileAccount: PublicKey, userAccount: PublicKey, owner: PublicKey) => Promise<void>;
    createPostIxMethodBuilder: (metadataUri: String, profileAccount: PublicKey, userAccount: PublicKey, owner: PublicKey) => Promise<_project_serum_anchor_dist_cjs_program_namespace_methods.MethodsBuilder<_project_serum_anchor.Idl, _project_serum_anchor_dist_cjs_idl.IdlInstruction & {
        name: string;
    }> | null>;
    postPDA: PublicKey | null;
    isCreatingPost: boolean;
    createPostError: Error | null;
};

declare const useFeed: (sdk: SDK, profileAccount: PublicKey) => {
    feedData: any;
    feedLoading: boolean;
    feedError: Error | null;
};

declare const useExploreFeed: (sdk: SDK, namespace: Namespace) => {
    exploreFeedData: any;
    exploreFeedLoading: boolean;
    exploreFeedError: Error | null;
};

declare const useReaction: (sdk: SDK) => {
    createReaction: (reactionType: ReactionType, fromProfile: PublicKey, toPostAccount: PublicKey, userAccount: PublicKey, owner: PublicKey) => Promise<void>;
    createReactionIxMethodBuilder: (reactionType: ReactionType, fromProfile: PublicKey, toPostAccount: PublicKey, userAccount: PublicKey, owner: PublicKey) => Promise<_project_serum_anchor_dist_cjs_program_namespace_methods.MethodsBuilder<_project_serum_anchor.Idl, _project_serum_anchor_dist_cjs_idl.IdlInstruction & {
        name: string;
    }> | null>;
    deleteReaction: (reactionAccount: PublicKey, fromProfile: PublicKey, toPostAccount: PublicKey, userAccount: PublicKey, owner: PublicKey) => Promise<void>;
    deleteReactionIxMethodBuilder: (reactionAccount: PublicKey, fromProfile: PublicKey, toPostAccount: PublicKey, userAccount: PublicKey, owner: PublicKey) => Promise<_project_serum_anchor_dist_cjs_program_namespace_methods.MethodsBuilder<_project_serum_anchor.Idl, _project_serum_anchor_dist_cjs_idl.IdlInstruction & {
        name: string;
    }> | null>;
    reactionPDA: PublicKey | null;
    isReacting: boolean;
    createReactionError: null;
};

declare const useFollow: (sdk: SDK) => {
    follow: (fromProfile: PublicKey, toProfile: PublicKey, userAccount: PublicKey, owner: PublicKey) => Promise<void>;
    createConnectionIxMethodBuilder: (fromProfile: PublicKey, toProfile: PublicKey, userAccount: PublicKey, owner: PublicKey) => Promise<_project_serum_anchor_dist_cjs_program_namespace_methods.MethodsBuilder<_project_serum_anchor.Idl, _project_serum_anchor_dist_cjs_idl.IdlInstruction & {
        name: string;
    }> | null>;
    connectionPDA: PublicKey | null;
    connectionLoading: boolean;
    connectionError: Error | null;
};

declare const useUnfollow: (sdk: SDK) => {
    unfollow: (connectionAccount: PublicKey, fromProfile: PublicKey, toProfile: PublicKey, userAccount: PublicKey, owner: PublicKey) => Promise<void>;
    deleteConnectionIxMethodBuilder: (connectionAccount: PublicKey, fromProfile: PublicKey, toProfile: PublicKey, userAccount: PublicKey, owner: PublicKey) => Promise<_project_serum_anchor_dist_cjs_program_namespace_methods.MethodsBuilder<_project_serum_anchor.Idl, _project_serum_anchor_dist_cjs_idl.IdlInstruction & {
        name: string;
    }> | null>;
    connectionLoading: boolean;
    connectionError: Error | null;
};

declare const useGum: (wallet: AnchorWallet, connection: Connection, opts: ConfirmOptions, cluster: Cluster, graphqlClient?: GraphQLClient) => SDK;

export { useCreatePost, useCreateProfile, useCreateUser, useExploreFeed, useFeed, useFollow, useGum, usePost, useProfile, useReaction, useUnfollow, useUser };
